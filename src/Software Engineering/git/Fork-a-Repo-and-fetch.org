#+TITLE: Fork a Repo and fetch
#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org

* 如果我们Fork一个源码库后，如何继续从原源码库更新呢？
+ 假如原源码库的地址为： https://github.com/octocat/Spoon-Knife.git [fn:1]
+ Fork后的自己的源码库地址为：
  https://github.com/username/Spoon-Knife.git
* Fork "Spoon-Knife" 库
  在其页面按“Fork”按钮

* Clone自己的库
#+BEGIN_SRC sh
git clone https://github.com/username/Spoon-Knife.git
# Clones your fork of the repo into the current directory in terminal
#+END_SRC

* 配置远端库
当一个源码库被拷贝到本地后，它默认的远端库是#origin#，并不是那个fork前
的原源码库，为了继续更新原源码库，我们需要把原源码库加入进来，并命名
为#upstream#
#+BEGIN_SRC sh
cd Spoon-Knife
# Changes the active directory in the prompt to the newly cloned "Spoon-Knife" directory

git remote add upstream https://github.com/octocat/Spoon-Knife.git
# Assigns the original repo to a remote called "upstream"

git fetch upstream
# Pulls in changes not present in your local repository, without modifying your files
#+END_SRC

* 推送更新
#+BEGIN_SRC sh
git push origin master
# Pushes commits to your remote repo stored on GitHub
#+END_SRC

* 从原源码库更新修改
#+BEGIN_SRC sh
git fetch upstream
# Fetches any new changes from the original repo

git merge upstream/master
# Merges any changes fetched into your working files
#+END_SRC

* 其他相关命令
+ 显示所有的远程仓库
#+BEGIN_SRC sh
$: git remote -v
#+END_SRC
加上 -v 选项(此为 –verbose 的简写取首字母)显示对应的克隆地址

+ 重命名远程仓库
#+BEGIN_SRC sh
$: git remote rename oldname newname
#+END_SRC

+ 删除远程仓库
#+BEGIN_SRC sh
$: git remote rm name
#+END_SRC

+ 查看远程仓库信息，可用于跟踪别人的push
#+BEGIN_SRC sh
$: git remote show remotename
#+END_SRC
* Footnotes

[fn:1] https://help.github.com/articles/fork-a-repo
  

